'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const fp = require('fingerpose');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

const fp__default = /*#__PURE__*/_interopDefaultLegacy(fp);

const { Finger: Finger$7, FingerCurl: FingerCurl$7, FingerDirection: FingerDirection$7, GestureDescription: GestureDescription$7 } = fp__default['default'];
const raisedHandGesture = new GestureDescription$7("raised_hand");
for (let finger of [
  Finger$7.Thumb,
  Finger$7.Index,
  Finger$7.Middle,
  Finger$7.Ring,
  Finger$7.Pinky
]) {
  raisedHandGesture.addCurl(finger, FingerCurl$7.NoCurl, 1);
}
for (let finger of [
  Finger$7.Index,
  Finger$7.Middle,
  Finger$7.Ring,
  Finger$7.Pinky
]) {
  raisedHandGesture.addDirection(finger, FingerDirection$7.VerticalUp, 0.95);
  raisedHandGesture.addDirection(finger, FingerDirection$7.DiagonalUpLeft, 0.2);
  raisedHandGesture.addDirection(finger, FingerDirection$7.DiagonalUpRight, 0.2);
}
raisedHandGesture.addDirection(Finger$7.Thumb, FingerDirection$7.HorizontalRight, 0.5);
raisedHandGesture.addDirection(Finger$7.Thumb, FingerDirection$7.HorizontalLeft, 0.5);

const { Finger: Finger$6, FingerCurl: FingerCurl$6, FingerDirection: FingerDirection$6, GestureDescription: GestureDescription$6 } = fp__default['default'];
const fingerSplayedGesture = new GestureDescription$6("finger_splayed");
for (let finger of [
  Finger$6.Thumb,
  Finger$6.Index,
  Finger$6.Middle,
  Finger$6.Ring,
  Finger$6.Pinky
]) {
  fingerSplayedGesture.addCurl(finger, FingerCurl$6.NoCurl, 1);
}
fingerSplayedGesture.addDirection(Finger$6.Thumb, FingerDirection$6.HorizontalRight, 0.7);
fingerSplayedGesture.addDirection(Finger$6.Thumb, FingerDirection$6.HorizontalLeft, 0.7);
fingerSplayedGesture.addDirection(Finger$6.Index, FingerDirection$6.VerticalUp, 0.75);
fingerSplayedGesture.addDirection(Finger$6.Index, FingerDirection$6.DiagonalUpLeft, 0.9);
fingerSplayedGesture.addDirection(Finger$6.Middle, FingerDirection$6.VerticalUp, 0.9);
fingerSplayedGesture.addDirection(Finger$6.Middle, FingerDirection$6.DiagonalUpLeft, 0.75);
fingerSplayedGesture.addDirection(Finger$6.Ring, FingerDirection$6.VerticalUp, 0.9);
fingerSplayedGesture.addDirection(Finger$6.Ring, FingerDirection$6.DiagonalUpRight, 0.75);
fingerSplayedGesture.addDirection(Finger$6.Index, FingerDirection$6.VerticalUp, 0.75);
fingerSplayedGesture.addDirection(Finger$6.Index, FingerDirection$6.DiagonalUpRight, 0.9);

const { Finger: Finger$5, FingerCurl: FingerCurl$5, FingerDirection: FingerDirection$5, GestureDescription: GestureDescription$5 } = fp__default['default'];
const thumbsDownGesture = new fp__default['default'].GestureDescription("thumbs_down");
thumbsDownGesture.addCurl(Finger$5.Thumb, FingerCurl$5.NoCurl, 1);
thumbsDownGesture.addDirection(Finger$5.Thumb, FingerDirection$5.VerticalDown, 1);
thumbsDownGesture.addDirection(Finger$5.Thumb, FingerDirection$5.DiagonalDownLeft, 0.5);
thumbsDownGesture.addDirection(Finger$5.Thumb, FingerDirection$5.DiagonalDownRight, 0.5);
thumbsDownGesture.addCurl(Finger$5.Index, FingerCurl$5.FullCurl, 1);
thumbsDownGesture.addCurl(Finger$5.Middle, FingerCurl$5.FullCurl, 1);
thumbsDownGesture.addCurl(Finger$5.Ring, FingerCurl$5.FullCurl, 1);
thumbsDownGesture.addCurl(Finger$5.Pinky, FingerCurl$5.FullCurl, 1);

const { Finger: Finger$4, FingerCurl: FingerCurl$4, FingerDirection: FingerDirection$4, GestureDescription: GestureDescription$4 } = fp__default['default'];
const victoryDescription = new GestureDescription$4("victory");
victoryDescription.addCurl(Finger$4.Thumb, FingerCurl$4.HalfCurl, 0.5);
victoryDescription.addCurl(Finger$4.Thumb, FingerCurl$4.NoCurl, 0.5);
victoryDescription.addDirection(Finger$4.Thumb, FingerDirection$4.VerticalUp, 1);
victoryDescription.addDirection(Finger$4.Thumb, FingerDirection$4.DiagonalUpLeft, 1);
victoryDescription.addCurl(Finger$4.Index, FingerCurl$4.NoCurl, 1);
victoryDescription.addDirection(Finger$4.Index, FingerDirection$4.VerticalUp, 0.75);
victoryDescription.addDirection(Finger$4.Index, FingerDirection$4.DiagonalUpLeft, 1);
victoryDescription.addCurl(Finger$4.Middle, FingerCurl$4.NoCurl, 1);
victoryDescription.addDirection(Finger$4.Middle, FingerDirection$4.VerticalUp, 1);
victoryDescription.addDirection(Finger$4.Middle, FingerDirection$4.DiagonalUpLeft, 0.75);
victoryDescription.addCurl(Finger$4.Ring, FingerCurl$4.FullCurl, 1);
victoryDescription.addDirection(Finger$4.Ring, FingerDirection$4.VerticalUp, 0.2);
victoryDescription.addDirection(Finger$4.Ring, FingerDirection$4.DiagonalUpLeft, 1);
victoryDescription.addDirection(Finger$4.Ring, FingerDirection$4.HorizontalLeft, 0.2);
victoryDescription.addCurl(Finger$4.Pinky, FingerCurl$4.FullCurl, 1);
victoryDescription.addDirection(Finger$4.Pinky, FingerDirection$4.VerticalUp, 0.2);
victoryDescription.addDirection(Finger$4.Pinky, FingerDirection$4.DiagonalUpLeft, 1);
victoryDescription.addDirection(Finger$4.Pinky, FingerDirection$4.HorizontalLeft, 0.2);
victoryDescription.setWeight(Finger$4.Index, 2);
victoryDescription.setWeight(Finger$4.Middle, 2);

const { Finger: Finger$3, FingerCurl: FingerCurl$3, FingerDirection: FingerDirection$3, GestureDescription: GestureDescription$3 } = fp__default['default'];
const thumbsUpDescription = new GestureDescription$3("thumbs_up");
thumbsUpDescription.addCurl(Finger$3.Thumb, FingerCurl$3.NoCurl, 1);
thumbsUpDescription.addDirection(Finger$3.Thumb, FingerDirection$3.VerticalUp, 1);
thumbsUpDescription.addDirection(Finger$3.Thumb, FingerDirection$3.DiagonalUpLeft, 0.25);
thumbsUpDescription.addDirection(Finger$3.Thumb, FingerDirection$3.DiagonalUpRight, 0.25);
for (let finger of [Finger$3.Index, Finger$3.Middle, Finger$3.Ring, Finger$3.Pinky]) {
  thumbsUpDescription.addCurl(finger, FingerCurl$3.FullCurl, 1);
  thumbsUpDescription.addDirection(finger, FingerDirection$3.HorizontalLeft, 1);
  thumbsUpDescription.addDirection(finger, FingerDirection$3.HorizontalRight, 1);
}

const { Finger: Finger$2, FingerCurl: FingerCurl$2, FingerDirection: FingerDirection$2, GestureDescription: GestureDescription$2 } = fp__default['default'];
const Gesture$2 = new GestureDescription$2("pinching");
Gesture$2.addCurl(Finger$2.Thumb, FingerCurl$2.NoCurl, 1);
Gesture$2.addDirection(Finger$2.Thumb, FingerDirection$2.HorizontalRight, 0.5);
Gesture$2.addDirection(Finger$2.Thumb, FingerDirection$2.DiagonalUpRight, 0.5);
for (let finger of [Finger$2.Index, Finger$2.Middle, Finger$2.Ring, Finger$2.Pinky]) {
  Gesture$2.addCurl(finger, FingerCurl$2.HalfCurl, 1);
  Gesture$2.addDirection(Finger$2.Thumb, FingerDirection$2.HorizontalRight, 0.25);
}

const { Finger: Finger$1, FingerCurl: FingerCurl$1, FingerDirection: FingerDirection$1, GestureDescription: GestureDescription$1 } = fp__default['default'];
const Gesture$1 = new GestureDescription$1("fist");
Gesture$1.addCurl(Finger$1.Thumb, FingerCurl$1.HalfCurl, 0.7);
Gesture$1.addCurl(Finger$1.Thumb, FingerCurl$1.FullCurl, 0.7);
for (let finger of [Finger$1.Index, Finger$1.Middle, Finger$1.Ring, Finger$1.Pinky]) {
  Gesture$1.addCurl(finger, FingerCurl$1.FullCurl, 1);
}

const { Finger, FingerCurl, FingerDirection, GestureDescription } = fp__default['default'];
const Gesture = new GestureDescription("ok");
Gesture.addCurl(Finger.Thumb, FingerCurl.NoCurl, 1);
Gesture.addDirection(Finger.Thumb, FingerDirection.DiagonalUpRight, 0.75);
Gesture.addCurl(Finger.Index, FingerCurl.HalfCurl, 1);
Gesture.addDirection(Finger.Index, FingerDirection.DiagonalUpRight, 0.75);
Gesture.addCurl(Finger.Middle, FingerCurl.NoCurl, 1);
Gesture.addDirection(Finger.Middle, FingerDirection.DiagonalUpRight, 0.75);
Gesture.addCurl(Finger.Ring, FingerCurl.NoCurl, 1);
Gesture.addDirection(Finger.Ring, FingerDirection.VerticalUp, 0.75);
Gesture.addCurl(Finger.Pinky, FingerCurl.NoCurl, 1);
Gesture.addDirection(Finger.Pinky, FingerDirection.VerticalUp, 0.75);

const index$1 = /*#__PURE__*/Object.freeze({
    __proto__: null,
    raisedHandGesture: raisedHandGesture,
    fingerSplayedGesture: fingerSplayedGesture,
    thumbsDownGesture: thumbsDownGesture,
    victoryGesture: victoryDescription,
    thumbsUpGesture: thumbsUpDescription,
    pinchingGesture: Gesture$2,
    okGesture: Gesture,
    fistGesture: Gesture$1
});

const bestMatch = (gestures) => {
  if (gestures.length > 0) {
    const confidence = gestures.map((g) => g.confidence);
    const maxConfidence = confidence.indexOf(Math.max.apply(null, confidence));
    return gestures[maxConfidence];
  } else {
    return null;
  }
};

const index = /*#__PURE__*/Object.freeze({
    __proto__: null,
    bestMatch: bestMatch
});

exports.Gestures = index$1;
exports.Utils = index;
