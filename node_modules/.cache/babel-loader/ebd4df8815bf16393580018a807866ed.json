{"ast":null,"code":"export const drawRect = (detections, ctx) => {\n  detections.forEach(prediction => {\n    if (prediction.class !== 'person') {\n      const [x, y, width, height] = prediction['bbox'];\n      const text = prediction['class'];\n      const color = 'green';\n      ctx.strokeSylt = color;\n      ctx.font = '18px Arial';\n      ctx.fillStyle = color;\n      ctx.beginPath();\n      ctx.fillText(text, x, y);\n      ctx.rect(x, y, width, height);\n      ctx.stroke();\n    }\n  });\n};\n\n// Points for fingers\nconst fingerJoints = {\n  thumb: [0, 1, 2, 3, 4],\n  indexFinger: [0, 5, 6, 7, 8],\n  middleFinger: [0, 9, 10, 11, 12],\n  ringFinger: [0, 13, 14, 15, 16],\n  pinky: [0, 17, 18, 19, 20]\n};\n\n// Infinity Gauntlet Style\nconst style = {\n  0: {\n    color: \"yellow\",\n    size: 15\n  },\n  1: {\n    color: \"gold\",\n    size: 6\n  },\n  2: {\n    color: \"green\",\n    size: 10\n  },\n  3: {\n    color: \"gold\",\n    size: 6\n  },\n  4: {\n    color: \"gold\",\n    size: 6\n  },\n  5: {\n    color: \"purple\",\n    size: 10\n  },\n  6: {\n    color: \"gold\",\n    size: 6\n  },\n  7: {\n    color: \"gold\",\n    size: 6\n  },\n  8: {\n    color: \"gold\",\n    size: 6\n  },\n  9: {\n    color: \"blue\",\n    size: 10\n  },\n  10: {\n    color: \"gold\",\n    size: 6\n  },\n  11: {\n    color: \"gold\",\n    size: 6\n  },\n  12: {\n    color: \"gold\",\n    size: 6\n  },\n  13: {\n    color: \"red\",\n    size: 10\n  },\n  14: {\n    color: \"gold\",\n    size: 6\n  },\n  15: {\n    color: \"gold\",\n    size: 6\n  },\n  16: {\n    color: \"gold\",\n    size: 6\n  },\n  17: {\n    color: \"orange\",\n    size: 10\n  },\n  18: {\n    color: \"gold\",\n    size: 6\n  },\n  19: {\n    color: \"gold\",\n    size: 6\n  },\n  20: {\n    color: \"gold\",\n    size: 6\n  }\n};\n\n// Drawing function\nexport const drawHand = (predictions, ctx) => {\n  // Check if we have predictions\n  if (predictions.length > 0) {\n    // Loop through each prediction\n    predictions.forEach(prediction => {\n      // Grab landmarks\n      const landmarks = prediction.landmarks;\n\n      // Loop through fingers\n      for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n        let finger = Object.keys(fingerJoints)[j];\n        //  Loop through pairs of joints\n        for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n          // Get pairs of joints\n          const firstJointIndex = fingerJoints[finger][k];\n          const secondJointIndex = fingerJoints[finger][k + 1];\n\n          // Draw path\n          ctx.beginPath();\n          ctx.moveTo(landmarks[firstJointIndex][0], landmarks[firstJointIndex][1]);\n          ctx.lineTo(landmarks[secondJointIndex][0], landmarks[secondJointIndex][1]);\n          ctx.strokeStyle = \"plum\";\n          ctx.lineWidth = 4;\n          ctx.stroke();\n        }\n      }\n\n      // Loop through landmarks and draw em\n      for (let i = 0; i < landmarks.length; i++) {\n        // Get x point\n        const x = landmarks[i][0];\n        // Get y point\n        const y = landmarks[i][1];\n        // Start drawing\n        ctx.beginPath();\n        ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\n\n        // Set line color\n        ctx.fillStyle = style[i][\"color\"];\n        ctx.fill();\n      }\n    });\n  }\n};","map":{"version":3,"names":["drawRect","detections","ctx","forEach","prediction","class","x","y","width","height","text","color","strokeSylt","font","fillStyle","beginPath","fillText","rect","stroke","fingerJoints","thumb","indexFinger","middleFinger","ringFinger","pinky","style","size","drawHand","predictions","length","landmarks","j","Object","keys","finger","k","firstJointIndex","secondJointIndex","moveTo","lineTo","strokeStyle","lineWidth","i","arc","Math","PI","fill"],"sources":["/Users/himash/Projects/Multimodal UI/ChefMate/src/utilities.js"],"sourcesContent":["export const drawRect = (detections,ctx) => {\n    detections.forEach(prediction => {\n        \n\n      if(prediction.class !== 'person'){\n        const [x,y,width,height] = prediction['bbox'];\n        const text = prediction['class'];\n  \n        const color = 'green';\n        ctx.strokeSylt = color;\n        ctx.font = '18px Arial';\n        ctx.fillStyle = color;\n  \n        ctx.beginPath();\n        ctx.fillText(text,x,y);\n        ctx.rect(x,y,width,height);\n        ctx.stroke();\n      }\n      \n    });\n}\n\n// Points for fingers\nconst fingerJoints = {\n    thumb: [0, 1, 2, 3, 4],\n    indexFinger: [0, 5, 6, 7, 8],\n    middleFinger: [0, 9, 10, 11, 12],\n    ringFinger: [0, 13, 14, 15, 16],\n    pinky: [0, 17, 18, 19, 20],\n  };\n  \n  // Infinity Gauntlet Style\n  const style = {\n    0: { color: \"yellow\", size: 15 },\n    1: { color: \"gold\", size: 6 },\n    2: { color: \"green\", size: 10 },\n    3: { color: \"gold\", size: 6 },\n    4: { color: \"gold\", size: 6 },\n    5: { color: \"purple\", size: 10 },\n    6: { color: \"gold\", size: 6 },\n    7: { color: \"gold\", size: 6 },\n    8: { color: \"gold\", size: 6 },\n    9: { color: \"blue\", size: 10 },\n    10: { color: \"gold\", size: 6 },\n    11: { color: \"gold\", size: 6 },\n    12: { color: \"gold\", size: 6 },\n    13: { color: \"red\", size: 10 },\n    14: { color: \"gold\", size: 6 },\n    15: { color: \"gold\", size: 6 },\n    16: { color: \"gold\", size: 6 },\n    17: { color: \"orange\", size: 10 },\n    18: { color: \"gold\", size: 6 },\n    19: { color: \"gold\", size: 6 },\n    20: { color: \"gold\", size: 6 },\n  };\n  \n  // Drawing function\nexport const drawHand = (predictions, ctx) => {\n    // Check if we have predictions\n    if (predictions.length > 0) {\n      // Loop through each prediction\n      predictions.forEach((prediction) => {\n        // Grab landmarks\n        const landmarks = prediction.landmarks;\n  \n        // Loop through fingers\n        for (let j = 0; j < Object.keys(fingerJoints).length; j++) {\n          let finger = Object.keys(fingerJoints)[j];\n          //  Loop through pairs of joints\n          for (let k = 0; k < fingerJoints[finger].length - 1; k++) {\n            // Get pairs of joints\n            const firstJointIndex = fingerJoints[finger][k];\n            const secondJointIndex = fingerJoints[finger][k + 1];\n  \n            // Draw path\n            ctx.beginPath();\n            ctx.moveTo(\n              landmarks[firstJointIndex][0],\n              landmarks[firstJointIndex][1]\n            );\n            ctx.lineTo(\n              landmarks[secondJointIndex][0],\n              landmarks[secondJointIndex][1]\n            );\n            ctx.strokeStyle = \"plum\";\n            ctx.lineWidth = 4;\n            ctx.stroke();\n          }\n        }\n  \n        // Loop through landmarks and draw em\n        for (let i = 0; i < landmarks.length; i++) {\n          // Get x point\n          const x = landmarks[i][0];\n          // Get y point\n          const y = landmarks[i][1];\n          // Start drawing\n          ctx.beginPath();\n          ctx.arc(x, y, style[i][\"size\"], 0, 3 * Math.PI);\n  \n          // Set line color\n          ctx.fillStyle = style[i][\"color\"];\n          ctx.fill();\n        }\n      });\n    }\n  };\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}